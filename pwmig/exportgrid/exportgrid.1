.TH EXPORTGRID 1 "$Date: 2008/11/13 12:56:03 $"
.SH NAME
exportgrid - ascii output of GCLgrid objects
.SH SYNOPSIS
.nf
exportgrid db gridname [-f fieldname -3d -vector]
.fi
.SH DESCRIPTION
.LP
This is a relatively crude program to output the contents of various
GCLgrid related objects as simple ascii data.  This implementation supports
three data type:  GCLgrid, GCLgrid3d, GCLscalarfield, GCLscalarfield3d,
GCLvectorfield, and GCLvectorfield3d.  In all cases the object's contents
are dumped stdout.  The type of object to dump is implied from combinations
of the arguments passed to the program.  See the following section for a 
description of how this works.

The default requires two arguments.  \fIdb\fR is assumed to be an
Antelope database name containing at least a gclgdisk table and 
gclfield table if a field object is to being referenced.  The
\fIgridname\fR is required.  It defines a unique name assigned to 
a particular grid referenced in the gclgdisk table.
.SH OPTIONS
.IP -f
Dump the field with the unique name \fIfieldname\fR defined in the gclfield
table.  The field and grid names must be consistent or the program will
abort.
.IP -3d
Switch to 3d mode.  The default assumes the grid/field are 2d objects.
.IP -vector
Assume the field being referenced is a vector field object.  
.LP
The -f, -3d, and -vector options work together to define the type of 
object the program tries to load.  If -f is not used the assumption is
only grid geometry is to be written to output.  The -3d option is a
switch between the class of 2d and 3d GCLgrid/field objects. Finally,
the -vector argument is required if a field being referenced is a 
vector field. 
.SH FILES
.LP
At this time the output format is very different for field objects
and grid objects.  Grid object is simpler and is just a series
of blanks separated fields defining (in order):  latitude (degrees),
longitude (degrees), and depth (km).  
.LP
For field data this program is little more than a front end for
the C++ operator << for these objects.  The format is:
.LP
\fILine 1:\fR  is a blank separated list of two or three integers; 
two for 2d and three for 3d data.  These define the number of node
points in x1, x2, and x3 directions respectively.  
.LP
The remainder of the file is a series of lines with a count equal to 
the product of the integers printed on line 1.  Each line of these
lines is a blank separated list of attributes in the following order:
x1, x2, x3, latitude, longitude, radius, val(1), ..., val(nv)
where x1,x2, and x3 are the location of this grid point in the 
Cartesian system used internally by the GCLgrid library; 
latitude, longitude, and radius are Earth coordinates, and 
val(1) to val(nv) are the nv data values associated with this 
grid point.  For scalar fields nv is 1 so there is only one val.  
.SH "SEE ALSO"
.nf
http://geology.indiana.edu/pavlis/software/gclgrid/ccdoc.GCLgrid.GCLgrid.pkg.html
.fi
.SH "BUGS AND CAVEATS"
.LP
The program does not automatically make a sanity check for scalar versus
vector fields.  The output will be scrambled if a vector field is referenced
without using the -vector flag.  I am not sure what will happen if a 
scalar field is referenced with the -vector flag set.  
Remember that famous quote:  "Do you feel lucky?  Do ya, punk?".
.SH AUTHOR
.nf
Gary L. Pavlis
Indiana University
pavlis@indiana.edu
.fi
.\" $Id: exportgrid.1,v 1.1 2008/11/13 12:56:03 pavlis Exp $
