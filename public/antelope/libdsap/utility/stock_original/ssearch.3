'\" te


.\" $Name $Revision: 1.1.1.1 $ $Date: 1997/04/12 04:19:02 $
.EQ
delim $$
.EN
.TH SSEARCH 3 "$Date: 1997/04/12 04:19:02 $"
.SH NAME
ssearch \- binary search of index
.SH SYNOPSIS
.nf
int ssearch ( char *key,
	 int keysize,
	 char *index,
	 int nkeys,
	 int unique,
	 int (*compare)(),
	 void *private,
	 int *ns,
	 int *ne );
.fi
.SH DESCRIPTION
\fBSsearch\fR is a binary search of a sorted list, with allows the
list to contain repeated values.  Its input arguments are:
.IP \fIkey\fR
.IP \fIkeysize\fR
the key for which to search and its size
.IP \fIindex\fR
.IP \fInkeys\fR
the index to search and its size (number of keys). 
.IP \fIunique\fR
a flag to indicate that the key is unique in the table
(or perhaps, that you only need a match, not all matches).
The search for the boundaries of the set of matching keys adds
significantly to the cost of the search.
.IP \fIcompare\fR
.IP \fIprivate\fR
A pointer to the comparison routine, and a private pointer which 
is passed to the comparison routine.  The comparison routine is
called like "compare ( key1, key2, private )";
it should return an integer less
than, equal to, or greater  than  zero  if
the first  argument  is respectively less than, equal to, or
greater than the second.
.IP \fIns\fR
.IP \fIne\fR
\fIns\fR and \fIne\fR bracket the range in the index which 
matches the key; ie, if a match is found, then all the keys in the
index from ns to ne inclusive match the key.  If no matches are found, 
ns > ne, and the key could be inserted immediately following ne, or immediately
before ns.
.SH EXAMPLE
.nf
    moser% cat try_search.c
    #include <memory.h>
    #include "stock.h"
     
    int compare ( a, b, private ) 
    int *a, *b ; 
    { 
        return *a-*b ; 
    }
     
    int show_table ( table, n ) 
    int *table; 
    int n ;
    {
        int i ; 
        printf ( "\en" ) ; 
        for ( i=0 ; i<n ; i++ ) 
            printf ( "%2d ", i ) ; 
        printf ( "\en" ) ; 
     
        for ( i=0 ; i<n ; i++ ) 
            printf ( " %d ", table[i] ) ; 
        printf ( "\en" ) ; 
    }
     
    static int table[] = { 0, 4, 4, 4, 4, 4, 9, 8, 
            7, 7, 7, 7, 7, 4, 3, 2, 1 } ;
    static int n = sizeof(table)/sizeof(int) ; 
     
    main (argc, argv ) 
    int argc ;
    char *argv ; 
    {
        char aline[STRSZ] ; 
        int ns, ne, i, result ;
        show_table ( table, n ) ; 
        shellsort ( table, n, sizeof(int), compare, 0 ) ; 
        show_table ( table, n ) ; 
        while ( gets(aline) ) 
            {
            i = atoi ( aline ) ; 
            printf ( "searching for %d\en", i ) ; 
            result = ssearch ( &i, sizeof(int), 
                    table, n, 0, compare, 0, &ns,&ne ) ; 
            if ( result > 0 ) 
                printf ( "result=%d ns=%d (%d)  ne=%d (%d)\en",
                    result, ns, table[ns], ne, table[ne] ) ; 
            else
                printf ( "result=%d ns=%d        ne=%d\en", 
                    result, ns, ne ) ; 
            }
        return 0 ;
    }
    moser% trysearch < trysearch.in

    0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 
    0  4  4  4  4  4  9  8  7  7  7  7  7  4  3  2  1 

    0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 
    0  1  2  3  4  4  4  4  4  4  7  7  7  7  7  8  9 
    searching for -1
    result=0 ns=0        ne=-1
    searching for 0
    result=1 ns=0 (0)  ne=0 (0)
    searching for 2
    result=1 ns=2 (2)  ne=2 (2)
    searching for 4
    result=6 ns=4 (4)  ne=9 (4)
    searching for 5
    result=0 ns=10        ne=9
    searching for 7
    result=5 ns=10 (7)  ne=14 (7)
    searching for 8
    result=1 ns=15 (8)  ne=15 (8)
    searching for 9
    result=1 ns=16 (9)  ne=16 (9)
    searching for 10
    result=0 ns=17        ne=16
    moser%
.fi
.SH RETURN VALUES
\fBssearch\fR returns the number of matching keys.
.SH LIBRARY
libstock.a
.SH DIAGNOSTICS
none
.SH "SEE ALSO"
.nf
shellsort(3)
.fi
.SH "BUGS AND CAVEATS"
.SH AUTHOR
Daniel Quinlan

.\" $Id: ssearch.3,v 1.1.1.1 1997/04/12 04:19:02 danq Exp $ 
