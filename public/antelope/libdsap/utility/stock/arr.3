.\" $Name $Revision: 1.2 $ $Date: 1997/08/08 17:06:08 $


.TH ARR 3 "$Date: 1997/08/08 17:06:08 $"
.SH NAME
newarr, setarr, getarr, delarr, keysarr, valsarr, applyarr, freearr, \- manipulate associative arrays
.SH SYNOPSIS
.nf
#include "arrays.h"

Arr *newarr ( int (*cmp)() );

void *setarr ( Arr *arr, char *key, void *value );

void *getarr ( Arr *arr, char *key );

void *delarr ( Arr *arr, char *key );

Tbl *keysarr ( Arr *arr );
Tbl *valsarr ( Arr *arr );

int freearr ( Arr *root, void (*free_value) () );

int applyarr ( Arr *arr, void (*function) (), void *private );
void (*function) (char *key, char *value, void *private) ; 

int cntarr ( Arr *arr ) ;
.fi
.SH DESCRIPTION
These routines implement associative arrays.
Associative arrays are arrays indexed by character strings; 
the elements are pointers.
These arrays are declared with "Arr *", and initialized with \fBnewarr()\fR.
.LP
The character string keys are kept (currently) in a sorted binary tree.  
The sort order may be changed by setting the 
compare function in the call to newarr.
The default (if zero is passed
to newarr) is strcmp; use its calling sequence and return values as an
example of how to write a different compare function.
.LP
The elements of an associative array are 
set using \fBsetarr\fR.
The previous value associated with a key is the return value (NULL 
if there were no previous value).
\fBSetarr\fR copies and saves the key
string (using strdup).  The pointer value is copied, but the 
data which the pointer references is the responsibility of the user;
this must be in static memory, not stack variables or variables which 
are overwritten.
.LP
Elements are retrieved with \fBgetarr\fR; NULL indicates an unset value.  
Values can be unset by using \fBsetarr\fR to set a value to NULL.
Alternatively, an element may be deleted from an array with \fBdelarr\fR.
.LP
It's often useful to obtain
either the set of keys or set of values for an associative array; \fBkeysarr\fR
and \fBvalsarr\fR return lists containing
the (alphabetically sorted) set of keys or set of values, respectively.
(These lists are always newly allocated, and you are responsible
for freeing them).
.LP
A function may be applied to every element of the array with the 
routine \fBapplyarr\fR.  The function which is to be applied must
take three arguments: the key, the value, and a private pointer which 
could contain any other parameters the function might need.  The function 
should return
an int.  \fBApplyarr\fR always returns zero.
.LP
\fBcntarr\fR returns a count of the nodes in the tree.
.LP
The memory used by a table is freed with \fBfreearr\fR; this requires
a function which is to be used to free the elements of the array. 
This function takes one arguments, a 
pointer to the element(value).
\fBFreearr\fR always returns zero.
.LP
\fIAssociative arrays where the values are strings may be saved in and
read from parameter files.  See pf(3).\fR
.LP
Associative arrays are based on balanced binary tree routines.
.SH EXAMPLE
.nf

#include <stdio.h>
#include <string.h>
#include "stock.h"

main (argc, argv)
int argc ; 
char **argv ;
{
    Arr *arr ; 
    FILE *file ; 
    char aline[STRSZ] ;
    char *filename ; 
    char *cp ; 

    if ( argc != 2 ) 
	die ( 0, "Usage: %s filename\en", argv[0] ) ; 

    filename = argv[1] ; 
    file = fopen ( filename, "r" ) ; 
    if ( file == 0 ) 
	die ( 1, "Can't open %s\en", filename ) ; 

    arr = newarr ( 0 )  ;

    while ( fgets(aline, STRSZ, file) ) 
	{
	aline[strlen(aline)-1] = 0 ; 
	setarr ( arr, aline, 1 ) ;
	}
    fclose ( file ) ; 

    file = fopen ( filename, "r" ) ; 
    while ( fgets(aline, STRSZ, file) ) 
	{
	aline[strlen(aline)-1] = 0 ; 
	if ( getarr ( arr, aline ) == 0)
	    complain ( 0, "Can't find key %s", aline ) ; 
	if ( delarr ( arr, aline ) == 0 ) 
	    complain ( 0, "Counldn't delete key %s", aline ) ; 
	}
    fclose ( file ) ; 

    freearr ( arr, 0 ) ; 

    return 0 ;
}
.fi
.SH RETURN VALUES
There are no error conditions for these routines, except running out of
memory, in which case the program will die.  An attempt to access a
non-existent array value will return null.
\fBSetarr\fR returns the previous value of the array entry which was set.
\fBDelarr\fR returns the value pointer corresponding to the key, or 0 if
the key was not found.
.SH LIBRARY
-lstock
.SH DIAGNOSTICS
none
.SH "SEE ALSO"
.nf
tbl(3)
stbl(3)
strcmp(3)  
pf(3)
clear_register(3)
.fi
.SH "BUGS AND CAVEATS"
The deletion routine for the red-black balanced tree routines (on which these arr
routines are based) does not maintain a balanced red-black tree, so that the underlying
tree may have unsatisfactory performance after many deletions.
.SH AUTHOR
Daniel Quinlan

.\" $Id: arr.3,v 1.2 1997/08/08 17:06:08 danq Exp $ 
