'\" te


.\" $Name $Revision: 1.1.1.1 $ $Date: 1997/04/12 04:18:59 $
.EQ
delim $$
.EN
.TH ARRAYS 3 "$Date: 1997/04/12 04:18:59 $"
.SH NAME
newtbl, settbl, gettbl, maxtbl, applytbl, freetbl, newarr, setarr, getarr, keysarr, valsarr, applyarr, freearr, newstbl, addstbl, delstbl, tststbl, getstbl, maxstbl, applystbl, freestbl \- manipulate variably sized tables, associative arrays, and sorted tables
.SH SYNOPSIS
.nf
#include "arrays.h"

Tbl *newtbl (size) 
int size ;

int settbl (  tbl, index, value ) 
Tbl *tbl ; 
int index ; 
char *value ; 

char *gettbl ( tbl, index ) 
Tbl *tbl ; 
int index ; 

int maxtbl ( tbl ) 
Tbl *tbl ; 

int freetbl ( tbl, free_tbl_val ) 
Tbl *tbl ; 
int (*free_tbl_val) () ; 

int applytbl ( tbl, function, private ) 
Tbl *tbl ; 
int (*function) () ; 
void *private ; 

Arr *newarr (compare) 
int (*compare) () ; 

char *setarr ( arr, key, value ) 
Arr *arr ; 
char *key ; 
char *value ; 

char *getarr ( arr, key )
Arr *arr ; 
char *key ; 

Tbl *keysarr ( arr )
Arr *arr ; 

Tbl *valsarr ( arr ) 
Arr *arr ; 

int freearr ( arr, free_arr_val ) 
Tbl *arr ; 
int (*free_arr_val) () ; 

int applyarr ( arr, function, private ) 
Tbl *arr ; 
int (*function) () ; 
void *private ; 

Stbl *newstbl (compare) 
int (*compare) () ; 

int setstbl (  stbl, index, key ) 
Stbl *stbl ; 
int index ; 
char *key ; 

char *addstbl ( stbl, key ) 
Stbl *stbl ; 
char *key ; 

void delstbl ( stbl, key ) 
Stbl *stbl ; 
char *key ; 

char *tststbl ( stbl, key ) 
Stbl *stbl ; 
char *key ; 

char *getstbl ( stbl, index ) 
Stbl *stbl ; 
int index ; 

int maxstbl ( stbl ) 
Stbl *stbl ; 

int freestbl ( stbl, free_stbl_val ) 
Stbl *stbl ; 
int (*free_stbl_val) () ; 

int applystbl ( stbl, function, private ) 
Stbl *stbl ; 
int (*function) () ; 
void *private ; 

.fi
.SH DESCRIPTION
These routines implement variably sized tables and associative arrays.
.SS Variably Sized Tables
Variably sized tables allow keeping lists of indeterminate size; the
table grows as necessary to accommodate the largest index.
These tables are declared with
"Tbl *", and initialized with \fBnewtbl()\fR.  The elements of the table
are pointers.
.LP
Elements are set using \fBsettbl\fR.
If the index passed to settbl is less than zero, the next
unused entry is filled.
The index of the entry which was set is returned. 
(Thus you can fill a table without keeping track of the index.)
.LP
You may set the initial size of the table with the argument to newtbl. 
So if you know the necessary size, you
will minimize the number of calls to realloc (to resize the table
as it grows).
.LP
Element of the table are returned by \fBgettbl\fR; if the element is 
not set, null is returned.  (You may unset an entry by setting its
value to null).
.LP
The number of elements in a table (that is, the
index of the highest element set with settbl plus one) may be found with
\fBmaxtbl\fR.  
.LP
Note that the table holds only pointers; the actual data must be
kept by the user in static memory -- ie, not in stack variables, or in
variables which are constantly overwritten.
.LP
A function may be applied to every element of the table with the 
routine \fBapplytbl\fR.  The function which is to be applied must
take two arguments: the element, and a private pointer which would contain
any other parameters the function might need.  The function should return
an int.  The value returned by \fBapplytbl\fR is the sum of the
return values for all the calls to function.
.LP
The memory used by a table is freed with \fBfreetbl\fR; this requires
a function which is to be used to free the elements of the table.
This function takes one argument, a pointer to the element to be freed, and
returns an integer.  \fBFreetbl\fR returns the sum of all the calls
to this function.
.SS Associative Arrays
Associative arrays are arrays indexed by character strings; again,  
the elements are pointers.
These arrays are declared with "Arr *", and initialized with \fBnewarr()\fR.
.LP
The character string keys are kept (currently) in a sorted binary tree.  
The sort order may be changed by setting the 
compare function in the call to newarr.
The default (if zero is passed
to newarr) is strcmp; use its calling sequence and return values as an
example of how to write a different compare function.
.LP
The elements of an associative array are 
set using \fBsetarr\fR.
The previous value associated with a key is the return value (NULL 
if there were no previous value).
\fBSetarr\fR copies and saves the key
string (using strdup).  The pointer value is copied, but the 
data which the pointer references is the responsibility of the user;
this must be in static memory, not stack variables or variables which 
are overwritten.
.LP
Elements are retrieved with \fBgetarr\fR; NULL indicates an unset value.  
Values can be unset by using \fBsetarr\fR to set a value to NULL.
.LP
It's often useful to obtain
either the set of keys or set of values for an associative array; \fBkeysarr\fR
and \fBvalsarr\fR return variably sized pointer tables containing
the (alphabetically sorted) set of keys or set of values, respectively.
.LP
A function may be applied to every element of the array with the 
routine \fBapplyarr\fR.  The function which is to be applied must
take two arguments: the element, and a private pointer which would contain
any other parameters the function might need.  The function should return
an int.  The value returned by \fBapplyarr\fR is the sum of the
return values for all the calls to function.
.LP
The memory used by a table is freed with \fBfreearr\fR; this requires
a function which is to be used to free the elements of the array. 
This function takes one argument, a pointer to the element to be freed, and
returns an integer.  \fBFreearr\fR returns the sum of all the calls
to this function and other calls to free within \fBfreearr\fR.
.LP
Associative arrays are based on the binary tree routines tfind, tsearch and
tdelete.
.SS Sorted Variably Sized Tables
Sorted variably sized tables allow keeping a table 
of indeterminate size consisting of pointers sorted in some arbitrary manner. 
The table grows as necessary to accommodate the pointers added to it.
\fIThe list will only contain \fBunique\fI keys.\fR
These tables are declared with
"Stbl *", and initialized with \fBnewstbl()\fR.  The compare argument
to \fBnewstbl\fR is a function which returns an integer indicating
the relationship between two keys (pointers) of the table.  The default
(if this argument is NULL) is strcmp; use its declaration as an example
of how to write your own compare routine.
.LP
Elements are added using \fBaddstbl\fR, and deleted with \fBdelstbl\fR.
\fBAddstbl\fR returns the pointer to the added element; if an element
which matches the passed key already exists, a pointer to that element
is returned.
.LP
You may test if an element exists with the routine tststbl; it returns
a pointer to the element if it's found, otherwise zero.
.LP
The number of elements in a table may be found with
\fBmaxstbl\fR.  
An element of the table is returned by \fBgetstbl\fR. 
.LP
Note that the table holds only pointers; the actual data must be
kept by the user in static memory -- ie, not in stack variables, or in
variables which are constantly overwritten.
.LP
Sorted tables are implemented as sorted binary trees which are condensed into
tables whenever getstbl or maxstbl is called (and the tree has changed 
since the last call).  Since this condensation is
relatively expensive, you will normally want to minimize the number of
interleaved calls to addstbl or delstbl and maxstbl or getstbl.  The typical
use envisioned for these routines is to first create a sorted table
by repeated calls to addstbl, and then to apply some function to 
every pointer in the table in order.
.LP
A function may be applied to every element of the table with the 
routine \fBapplystbl\fR.  The function which is to be applied must
take two arguments: the element, and a private pointer which would contain
any other parameters the function might need.  The function should return
an int.  The value returned by \fBapplystbl\fR is the sum of the
return values for all the calls to function.
.LP
The memory used by a table is freed with \fBfreestbl\fR; this requires
a function which is to be used to free the elements of the table.
This function takes one argument, a pointer to the element to be freed, and
returns an integer.  \fBFreestbl\fR returns the sum of all the calls
to this function.
.SS Associative Arrays
.SH EXAMPLE
.nf

static int printval ( value, private ) 
char *value ; 
char *private ; 
{ 
    printf ( private, value ) ; 
}

main () 
{
    int i, *j, n ; 
    Tbl *tbl ; 
    Arr *arr ; 
    Stbl *stbl ;
    char aline [ 80 ] ; 
    char value [ 80 ] ; 
    Tbl *keys ; 
    char *key, *val, *cp ; 
    char *private = " %s " ; 

    tbl = newtbl (0) ; 
    arr = newarr (0) ; 
    stbl = newstbl (0) ; 

    key = getarr ( arr, "hidan" ) ; 

    for ( i = 0 ; i< 10 ; i++ ) 
	{
	allot ( int *, j, 1 ) ; 
	*j = 2*i ; 
	gets (aline) ; 
	key = strdup ( aline ) ; 
	settbl ( tbl, -1, key ) ; 
	gets (aline) ; 
	val = strdup(aline) ; 
	setarr ( arr, key, val ) ; 
	if ( (cp = addstbl ( stbl, key )) != key )  
	    complain (0, "Duplicate key %s\n", key ) ; ; 
	if ( (cp = addstbl (stbl, val) ) != val ) 
	    complain (0, "Duplicate key %s\n", val ) ; 
	}
    
    n = maxtbl ( tbl ) ; 
    printf ( "tbl has %d values.\n", n ) ; 
    for ( i = 0 ; i< n ; i++ ) 
	{
	key = (char * ) gettbl ( tbl, i ) ; 
	printf ( "tbl[%d] = %s\n", i, key ) ; 
	}

    keys = keysarr ( arr ) ; 
    n = maxtbl ( keys ) ; 
    printf ( "arr has %d keys.\n", n ) ; 
    for ( i = 0 ; i< n ; i++ ) 
	{
	key = (char *) gettbl ( keys, i ) ; 
	printf ( "Key #%d is '%s'\n",  i, key ) ;  
	val = getarr ( arr, key ) ; 
	printf ( "\tvalue is %s\n", val ) ; 
	}
    
    n = maxstbl ( stbl ) ; 
    printf ( "stbl has %d values.\n", n ) ; 
    for ( i = 0 ; i< n ; i++ ) 
	{
	key = (char * ) getstbl ( stbl, i ) ; 
	printf ( "stbl[%d] = %s\n", i, key ) ; 
	}

    /* Test applytbl and applyarr */
    printf ( "\nResults of applytbl: \n" ) ; 
    applytbl ( tbl, printval, private ) ; 

    printf ( "\nResults of applyarr: \n" ) ; 
    applyarr ( arr, printval, private ) ; 

    printf ( "\nResults of applystbl: \n" ) ; 
    applystbl ( stbl, printval, private ) ; 

    printf ( "\n" ) ; 

    printf ( "Finally, try freeing the space.\n" ) ; 
    freetbl ( tbl, free ) ; 
    freearr ( arr, free ) ;
    freestbl ( stbl, 0 ) ; 
    return 0 ;
}

.fi
.SH RETURN VALUES
There are no error conditions for these routines, except running out of
memory, in which case the program will die.  An attempt to access a
non-existent array value will return null.
\fBSettbl\fR returns the index of the table entry which was set.
\fBSetarr\fR returns the previous value of the array entry which was set.
.SH LIBRARY
libstock.a
.SH DIAGNOSTICS
none
.SH "SEE ALSO"
.nf
tfind(3)
strcmp(3)  
.fi
.SH "BUGS AND CAVEATS"
.SH AUTHOR
Daniel Quinlan

.\" $Id: arrays.3,v 1.1.1.1 1997/04/12 04:18:59 danq Exp $ 
