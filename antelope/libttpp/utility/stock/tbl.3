.\" $Name $Revision: 1.1.1.1 $ $Date: 1997/04/12 04:19:03 $


.TH TBL 3 "$Date: 1997/04/12 04:19:03 $"
.SH NAME
newtbl, inittbl, maxtbl, settbl, gettbl, pushtbl, poptbl, unshifttbl, shifttbl, \
instbl, deltbl, cattbl, savetbl, readtbl, clrtbl, freetbl, \
applytbl, cmptbl, sorttbl, searchtbl, strtbl \- routines to manipulate lists
.SH SYNOPSIS
.nf
#include "stock.h"

Tbl *newtbl ( int size );
Tbl *inittbl ( int left_grow, int right_grow, int direct, char *null, int entry_size );

int maxtbl ( Tbl *tbl );

int settbl ( Tbl *tbl, int index, char *value );
char *gettbl ( Tbl *tbl, int index );

int pushtbl ( Tbl *tbl, char *value );
char *poptbl ( Tbl *tbl );

int unshifttbl ( Tbl *tbl, char *value );
char *shifttbl ( Tbl *tbl );

int instbl ( Tbl *tbl, int index, char *value );
char *deltbl ( Tbl *tbl, int index );

int cattbl ( Tbl *tbldest, Tbl *tblsrc );

int savetbl ( Tbl *tbl, char *filename, char *s );
Tbl *readtbl ( char *filename, char **s, int rw );

void trunctbl ( Tbl *tbl, int last, void (*free_tblval) () );
void clrtbl ( Tbl *tbl, void (*free_tblval) () );
void freetbl ( Tbl *tbl, void (*free_tblval) () );

int applytbl ( Tbl *tbl, int (*function) (), void *private );

int cmptbl ( Tbl *tbl1, Tbl *tbl2 );

void sorttbl ( Tbl *tbl, int (*compare) (), void *private );
int searchtbl ( char **key, Tbl *tbl, int (*compare) (), void *private, int *ns, int *ne );

char *jointbl ( Tbl *tbl, char *s) ;

Tbl *strtbl ( char *s1, ..., 0 ) 

.fi
.SH DESCRIPTION
These routines manipulate lists.  Lists are an ordered set of n objects, 
numbered (indexed) from zero to n-1.
Lists can be used to maintain a table of indefinite size, constrained
only by memory limitations.  Lists can also perform as stacks or fifo's.
.LP
List elements are often pointers; however, 
any object of uniform size can be a list element -- 
a character, an integer, 
a double, or some type of struct. A list of
pointers is called an indirect list. A list of objects,
such as a list of characters, a list of integers, or a list
of structures, is called a direct list. 
In both cases these routines all accept and return pointers. For 
indirect lists, the pointers themselves are considered the elements of the list.
For direct lists, the returned pointers point to elements of the list.
.LP
The representation of a list is a single contiguous array 
of elements.
A list may grow (within the limits of available 
memory); as it grows, the array will move around in memory.  
A list may also shrink, but the actual memory
usage of a list never decreases unless the entire list is deleted.
.LP
A new list is most easily initialized with the routine \fBnewtbl\fR.
Its only argument is
an estimate of the ultimate number of elements in the list; this number
may be zero.
\fI(See below for the more complex \fBinittbl\fI).\fR 
\fBNewtbl\fR creates an indirect list.
.LP
\fBSettbl\fR and \fBgettbl\fR access elements of the list by index
(from zero to n-1).  If the index refers to a non-existent element, 
\fBgettbl\fR returns the null element (null defaults to zero, but may be
set with \fBinittbl\fR).  If \fBsettbl\fR is called with a negative index, 
then the new element  is added to the end of the list; this is equivalent
to the \fBpushtbl\fR call.
.LP
\fBSettbl\fR may be used to set non-contiguous elements of the list; eg, 
you might set elements 1, 3, and 5 in a previously empty list.  
In that case, elements 0, 2, and
4 would be set to the null element. 
.LP
\fBMaxtbl\fR returns the current number of elements in the list; in 
the previous example, \fBmaxtbl\fR would return 6.
.LP
Similarly, \fBinstbl\fR and \fBdeltbl\fR insert and delete elements
into the specified location in the list.  If index < 0, \fBinstbl\fR
adds the element to the list on the left.
If index is greater than \fBmaxtbl\fR, \fBinstbl\fR adds the element to 
the list on the right.
If a non-existent element is specified for \fBdeltbl\fR, nothing happens, and
\fIdeltbl\fR returns the null value.
.LP
\fBPushtbl\fR and \fBpoptbl\fR add and remove elements from the right
side of the list.  \fBPoptbl\fR on an empty list returns the
null element.
.LP
\fBUnshifttbl\fR and \fBshifttbl\fR add and remove elements from the
left side of the list.  \fBShifttbl\fR on an empty list returns the
null element.
.LP
Note that \fBpushtbl\fR and \fBshifttbl\fR, or \fBunshifttbl\fR and \fBpoptbl\fR
may be used to implement a fifo.
.LP
\fBclrtbl\fR, \fBtrunctbl\fR and \fBfreetbl\fR all shorten lists. 
\fBfreetbl\fR eliminates the memory used by a list altogether, while \fBclrtbl\fR
simply empties the existing list, but doesn't eliminate the list.
\fBtrunctbl\fR shortens a list to the specified number of elements.
.LP
Lists may be written (in a binary form) to disk with \fBsavetbl\fR, 
and read back from disk with \fBreadtbl\fR.  
In both cases, the string \fIs\fR
is an arbitrary null-terminated string which provide additional information 
about the list.  
.LP
\fILists of strings may also be read and saved in parameter files -- 
see pf(3)\fR.
.LP
When a list is read from disk, it is actually left on disk and manipulated
there.  If the table was opened read-write, the copy on the disk may be
updated.  If the table is not writeable, attempts to update it (with
\fBdeltbl\fR, for example) will fail, probably with a segmentation violation.
.LP
Of course, it's not very useful to save pointers to files; memory
objects may move around from one execution to the next.  However, it
could be useful to save lists of some other object -- a list of 
integers, for example.
.LP
To create a list with elements other than pointers, you must use
the routine, \fBinittbl\fR, which provides many more options. 
Lists may grow at either end; the first two arguments, 
\fIleft_grow\fR and \fIright_grow\fR are 
initial estimates of growth on the left and right, respectively.
When the elements of the list are the pointers which are passed to
and from these routines,
the flag \fIdirect\fR should be zero.  
However, the elements of the list may actually be the objects; 
in this case, direct should be non-zero.
You may specify what the null element is; if this argument is zero, 
null elements are filled with zeros.
Finally, \fIentry_size\fR is the size of an element of the list.
.LP
\fBFreetbl\fR is used to deallocate a list.  You may pass a pointer
to a routine which will be applied to the pointer corresponding to each non-null
element of the list, before the entire list is freed.  \fBClrtbl\fR does not 
deallocate the list, but does set its size to zero, after applying the input
free routine to each non-null element.
.LP
\fBApplytbl\fR calls the specified function for each non-null element of
the list, passing both the pointer corresponding to the element and the specified 
\fIprivate\fR pointer.
.LP
\fBCattbl\fR may be used to concatenate two lists, which must be of
the same type -- ie, the size of elements must be the same, they must
both be direct or indirect, and their null values must be the same.
It's roughly the equivalent of strcat -- the second list is appended
to the end of the first list.
.LP
\fBCmptbl\fR compares two lists directly -- it compares the lists
with memcmp.  This might be more efficient than comparing element by 
element.
.LP
\fBSorttbl\fR uses a shell sort and the input comparison routine 
to sort a list.  (This sort is not stable; that is, elements which 
compare equal may retain their order from the original list.) 
.LP
A sorted list may be searched with \fBsearchtbl\fR, 
which is a binary search.
In both cases, the compare routine is of the form:
.sp
.IP "int compare ( element *a, element *b, void *private )"
.sp
.LP
The routine should return:
.nf
	negative	a < b 
	zero	a == b
	positive	a > b
.fi
.LP
Note that for an indirect list, since the elements are already pointers,
the compare routine will expect the address of a pointer.
For example, if you have a list of strings, each element of the
list is itself a character string pointer, and so the arguments which
are handed to compare are char **.
The returned values \fIns\fR and \fInr\fR from searchtbl bracket the
the matching entries in the table.  Ie, table entries \fIns\fR through
\fIne\fR inclusive match the key.  If there are no matches, then 
\fIns\fR \ >\  \fIne\fR, and the key could be inserted  
into the sorted list with:
.nf
    instbl ( tbl, ns, key ) ; 
.fi
.LP
\fBStrtbl\fR is a shorthand method for creating a list of strings; 
the variable argument list is all strings, terminated with zero.
.LP
\fBjointbl\fR returns a newly malloc'd string containing all the 
elements of the list, each separated by the specified string s.
.SH EXAMPLE
Below the tbl routines are used to store, sort, and search first a 
collection of integers, then of strings, then of structures. In all 
cases we use indirect lists.
.nf

    ugle% cat tbl_ex.c
    #include <stdio.h>
    #include <string.h>
    #include "stock.h"

    static int list[5] = {13, 2, 20, 14, 700}; 

    typedef struct {
	    int	n;
	    double	d;
	    char	s[STRSZ];
    } MYSTRUCT;

    int
    print_int( int *i, void *private )
    {
	    printf( "table entry (int) %d\\n", *i );
    }

    int 
    print_string( char *s, void *private )
    {
	    printf( "table entry (string) '%s'\\n", s );
    }

    int
    print_struct( MYSTRUCT *m, void *private )
    {
	    printf( "table entry (structure) {%d; %f; %s}\\n", m->n, m->d, m->s );
    }

    int
    cmp_int( int **a, int **b, void *private )
    {
	    return **a - **b;
    }

    int 
    cmp_string( char **a, char **b, void *private )
    {
	    return strcmp( *a, *b );
    }

    int
    cmp_struct( MYSTRUCT **a, MYSTRUCT **b, void *private )
    {
	    return (*a)->n - (*b)->n;
    }
    void
    free_int( int *i )
    {
	    free( i );
    }
     
    void
    free_string( char *s )
    {
	    free( s );
    }
     
    void
    free_struct( MYSTRUCT *m )
    {
	    free( m );
    }

    main()
    {
	    Tbl	*tbl;
	    int	i;
	    int	*elem_int;
	    int	*key_int;
	    char	*elem_string;
	    char	*key_string;
	    MYSTRUCT *elem_struct;
	    MYSTRUCT *key_struct;

	    int	ns, ne;
	    void	*private = (void *) NULL;

	    printf( "INTEGERS:\\n" );

	    tbl = newtbl( 0 );

	    for( i = 0; i<5; i++ ) {
		    allot( int *, elem_int, 1 );
		    *elem_int = list[i];
		    pushtbl( tbl, elem_int );
	    }
	    printf( "Entered %d elements\\n\\n", maxtbl( tbl ) );

	    applytbl( tbl, print_int, private );

	    printf( "\\nSorting entries:\\n\\n" );
	    sorttbl( tbl, cmp_int, private );
	    applytbl( tbl, print_int, private );

	    key_int = gettbl( tbl, 2 );
	    printf( "\\nElement with index 2 is %d\\n", *key_int );

	    printf( "As a contrived example, search using that as a key:\\n" );
	    searchtbl( (char *) &key_int, tbl, cmp_int, private, &ns, &ne );
	    printf( "\\nSought i=%d and found index range %d to %d\\n", *key_int, ns, ne );

	    freetbl( tbl, free_int );

	    printf( "\\nSTRINGS:\\n" );

	    tbl = newtbl( 0 );

	    for( i = 0; i<5; i++ ) {
		    allot( char *, elem_string, STRSZ );
		    sprintf( elem_string, "String containing %d", list[i] );
		    pushtbl( tbl, elem_string );
	    }
	    printf( "Entered %d elements\\n\\n", maxtbl( tbl ) );

	    applytbl( tbl, print_string, private );

	    printf( "\\nSorting entries:\\n\\n" );
	    sorttbl( tbl, cmp_string, private );
	    applytbl( tbl, print_string, private );

	    allot( char *, key_string, STRSZ );
	    sprintf( key_string, "String containing 14" );

	    searchtbl( (char *) &key_string, tbl, cmp_string, private, &ns, &ne );
	    printf( "\\nSought '%s' and found index range %d to %d\\n", key_string, ns, ne );

	    freetbl( tbl, free_string );

	    printf( "\\nSTRUCTURES:\\n" );

	    tbl = newtbl( 0 );

	    for( i = 0; i<5; i++ ) {
		    allot( MYSTRUCT *, elem_struct, 1 );
		    elem_struct->n = list[i];
		    elem_struct->d = (double) list[i];
		    sprintf( elem_struct->s, "Initial Index %d", i );
		    pushtbl( tbl, elem_struct );
	    }
	    printf( "Entered %d elements\\n\\n", maxtbl( tbl ) );

	    applytbl( tbl, print_struct, private );

	    printf( "\\nSorting entries:\\n\\n" );
	    sorttbl( tbl, cmp_struct, private );
	    applytbl( tbl, print_struct, private );

	    allot( MYSTRUCT *, key_struct, 1 );
	    key_struct->n = 14;

	    searchtbl( (char *) &key_struct, tbl, cmp_struct, private, &ns, &ne );
	    printf( "\\nSought m->d=%d and found index range %d to %d\\n", key_struct->n, ns, ne );

	    freetbl( tbl, free_struct );

	    exit( 0 );
    }
    ugle% tbl_ex
    INTEGERS:
    Entered 5 elements
     
    table entry (int) 13
    table entry (int) 2
    table entry (int) 20
    table entry (int) 14
    table entry (int) 700
     
    Sorting entries:
     
    table entry (int) 2
    table entry (int) 13
    table entry (int) 14
    table entry (int) 20
    table entry (int) 700
     
    Element with index 2 is 14
    As a contrived example, search using that as a key:
     
    Sought i=14 and found index range 2 to 2
     
    STRINGS:
    Entered 5 elements
     
    table entry (string) 'String containing 13'
    table entry (string) 'String containing 2'
    table entry (string) 'String containing 20'
    table entry (string) 'String containing 14'
    table entry (string) 'String containing 700'
     
    Sorting entries:
     
    table entry (string) 'String containing 13'
    table entry (string) 'String containing 14'
    table entry (string) 'String containing 2'
    table entry (string) 'String containing 20'
    table entry (string) 'String containing 700'
     
    Sought 'String containing 14' and found index range 1 to 1
     
    STRUCTURES:
    Entered 5 elements
     
    table entry (structure) {13; 13.000000; Initial Index 0}
    table entry (structure) {2; 2.000000; Initial Index 1}
    table entry (structure) {20; 20.000000; Initial Index 2}
    table entry (structure) {14; 14.000000; Initial Index 3}
    table entry (structure) {700; 700.000000; Initial Index 4}
     
    Sorting entries:
     
    table entry (structure) {2; 2.000000; Initial Index 1}
    table entry (structure) {13; 13.000000; Initial Index 0}
    table entry (structure) {14; 14.000000; Initial Index 3}
    table entry (structure) {20; 20.000000; Initial Index 2}
    table entry (structure) {700; 700.000000; Initial Index 4}
     
    Sought m->d=14 and found index range 2 to 2
    ugle% 
.fi
.SH RETURN VALUES
\fBNewtbl\fR and \fBinittbl\fR always return a pointer to a Tbl.
.LP
\fBGettbl\fR, \fBdeltbl\fR, \fBshifttbl\fR, and \fBpoptbl\fR return a pointer
to a list element if the specified element exists, and the null-element
otherwise.  Note that the default null-element is zero, not a pointer to 
zero.  
.LP
\fBSettbl\fR, \fBinstbl\fR, \fBunshifttbl\fR and \fBpushtbl\fR return the index of the 
inserted element.
.LP
\fBReadtbl\fR 
returns a Tbl pointer on success, zero otherwise.
.LP
\fBCattbl\fR and 
\fBsavetbl\fR return 0 for success, non-zero otherwise.
.LP
\fBCmptbl\fR returns 0 for equal, non-zero for not equal.
.LP
\fBSearchtbl\fR returns the number of matching elements.
.SH LIBRARY
-lstock
.SH DIAGNOSTICS
These messages may be left in the error register; none of these
routines will actually print error messages.  See clear_register(3).
.IP "tbl lists have different entry sizes:"
.IP "tbl lists are not both direct or indirect."
.IP "tbl lists have different null values."
.br
\fBcattbl\fR failed for the specified reason.

.IP "Can't open filename to write tbl."
.IP "Errors while writing tbl"
.br
\fBsavetbl\fR failed for the specified reason.

.IP "Can't open filename to read tbl."
.IP "Error trying to stat"
.IP "Error trying to mmap"
.IP "Bad magic number while trying to read tbl."
.br
\fBreadtbl\fR failed for the specified reason.
.SH "SEE ALSO"
.nf
arr(3)
stbl(3)
pf(3)
clear_register(3)
.fi
.SH "BUGS AND CAVEATS"
.LP
In a "direct" list, the pointers returned by \fBpoptbl\fR, 
\fBdeltbl\fR, or
\fBshifttbl\fR point to locations which may be
overwritten by later calls to tbl routines; you should
copy out the element.
.LP
In an "indirect" list, you must handle the memory allocation
for the objects to which the pointers which make up the list refer.
Don't use a static array to read in multiple values and save
multiple pointers to this one location in the list.
.LP
Don't attempt to update a list which has been opened read-only; 
the program will die.  Use cattbl to copy the list to a
writeable location first.
.SH AUTHOR
Daniel Quinlan

.\" $Id: tbl.3,v 1.1.1.1 1997/04/12 04:19:03 danq Exp $ 
