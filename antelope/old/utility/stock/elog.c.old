/*  Copyright (c) 1997 Boulder Real Time Technologies, Inc.           */
/*                                                                    */
/*  This software module is wholly owned by Boulder Real Time         */
/*  Technologies, Inc. Any use of this software module without        */
/*  express written permission from Boulder Real Time Technologies,   */
/*  Inc. is prohibited.                                               */


/* These routines are meant to standardize error handling and recovery */
/* danq  */
#define _REENTRANT

#include <errno.h>
#include <stdio.h>
#include <pthread.h>
#include <signal.h>
#include <stdlib.h>

#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

#include <time.h>
#include <string.h>
#include <ctype.h>
#include <malloc.h>
#include <sys/utsname.h>   
#include <sys/ucontext.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include "stock.h"
#include "elog.h"

static Tbl *Elog_tbl = 0 ; 

static int 	Elog_init = 0 ; 
static int 	Debugger_running = 0 ; 
char           *Program_Name = "***";
int		Immediate_Flag = 0 ; 
static int	Elog_wait = 10 ;

static char **Argv = 0 ; 
static int Argc = 0 ; 

static char *Tag[ELOG_NSEVERITY] = {
	    "%P",  	/* log */
	    "%P",	/* notify */
	    "%P",	/* complain */
	    "%P *fatal*",	/* die */
	    "%P *fault*"	/* fault */
} ; 

static char *Deliver[ELOG_NSEVERITY] = {
	    "",			/* log */
	    "stderr",		/* notify */
	    "stderr",		/* complain */
	    "stderr",  		/* die */
	    "stderr"  };	/* fault */

static int Max_msg = 50 ;
static char *Version = "$Name $Revision: 1.11 $ $Date: 1998/05/04 22:28:28 $" ;

static char *Debug[ELOG_NSEVERITY] ; 
static char *Debug_default[ELOG_NSEVERITY] = { 
	    "ups %r %p &", 		/* log */
	    "ups %r %p &", 		/* notify */
	    "ups %r %p &", 		/* complain */
	    "ups %r %p &", 		/* die */
	    "ups %r %p &" };		/* fault */

static char *Rtmsg[ELOG_NSEVERITY] ; 
static char *Rtmsg_default[ELOG_NSEVERITY] = {
	    0, 				/* log */
	    0, 				/* notify */
	    0, 				/* complain */
	    0, 				/* die */
	    0 };			/* fault */

static char *Faults = 0 ;
static char *Faults_default = "SIGILL:SIGTRAP:SIGIOT:SIGFPE:SIGBUS:SIGSEGV:SIGSYS" ;

/* looks like a solaris declaration */
static mutex_t Lock ;

/* posix would be this:
static pthread_mutex_t Lock ; 
*/

/* The following was created by processing /usr/include/sys/signal.h
   from a Sun running Solaris 2.5.  Some of the signals will differ
   on different machines, and there's no guarantee that the 
   mapping from integer to name will be the same.

   Signals which are commented out below cannot be intercepted.
    see sigaction(2)
*/
static Signal_info Signals[] = {
    {  1, "SIGHUP", "hangup" },
    {  2, "SIGINT", "interrupt (rubout)" },
    {  3, "SIGQUIT", "quit (ASCII FS)" },
    {  4, "SIGILL", "illegal instruction (not reset when caught)" },
    {  5, "SIGTRAP", "trace trap (not reset when caught)" },
    {  6, "SIGIOT", "IOT instruction" },
    {  6, "SIGABRT", "used by abort, replace SIGIOT in the future" },
    {  7, "SIGEMT", "EMT instruction" },
    {  8, "SIGFPE", "floating point exception" },
    /* {  9, "SIGKILL", "kill (cannot be caught or ignored)" },*/
    { 10, "SIGBUS", "bus error" },
    { 11, "SIGSEGV", "segmentation violation" },
    { 12, "SIGSYS", "bad argument to system call" },
    { 13, "SIGPIPE", "write on a pipe with no one to read it" },
    { 14, "SIGALRM", "alarm clock" },
    { 15, "SIGTERM", "software termination signal from kill" },
    { 16, "SIGUSR1", "user defined signal 1" },
    { 17, "SIGUSR2", "user defined signal 2" },
    { 18, "SIGCLD", "child status change" },
    { 18, "SIGCHLD", "child status change alias (POSIX)" },
    { 19, "SIGPWR", "power-fail restart" },
    { 20, "SIGWINCH", "window size change" },
    { 21, "SIGURG", "urgent socket condition" },
    { 22, "SIGPOLL", "pollable event occured" },
    /* { 23, "SIGSTOP", "stop (cannot be caught or ignored)" },*/
    { 24, "SIGTSTP", "user stop requested from tty" },
    { 25, "SIGCONT", "stopped process has been continued" },
    { 26, "SIGTTIN", "background tty read attempted" },
    { 27, "SIGTTOU", "background tty write attempted" },
    { 28, "SIGVTALRM", "virtual timer expired" },
    { 29, "SIGPROF", "profiling timer expired" },
    { 30, "SIGXCPU", "exceeded cpu limit" },
    { 31, "SIGXFSZ", "exceeded file size limit" },
    /* { 32, "SIGWAITING", "process's lwps are blocked" }, */
    /* { 33, "SIGLWP", "special signal used by thread library" }, */
    { 34, "SIGFREEZE", "special signal used by CPR" },
    { 35, "SIGTHAW", "special signal used by CPR" },
    /* { 36, "SIGCANCEL", "thread cancellation signal used by libthread" }, */
} ;

static int Nsignals = sizeof(Signals) / sizeof(Signal_info) ;

Signal_info *signal_bysig(int sig)
{
    int i ;
    for(i=0 ; i<Nsignals ; i++) {
	if (sig == Signals[i].sig ) {
	    return Signals+i ; 
	}
    }
    return 0 ; 
}


Signal_info *signal_byname(char *name)
{
    int i ;
    for(i=0 ; i<Nsignals ; i++) {
	if (strcmp(name, Signals[i].name) == 0 ) {
	    return Signals+i ; 
	}
    }
    return 0 ; 
}


static void
_elog_fault(sig, sip, uap)
int sig ; 
siginfo_t *sip ; 
ucontext_t *uap ;
{
    Signal_info *signal ;
    signal = signal_bysig(sig) ; 
    elog_fault(1, "%s\n", signal->description ) ; 
}

static void
elog_fail (char *fmt, char *s ) 
{
    fprintf(stderr, fmt, s) ;
    if (errno )
	perror("\t") ; 
    elog_print ( stderr, 0 ) ; 
    elog_clear() ;
}

static void
elog_setup_fault_handler(signals)
char *signals ;
{
    int i, nsignals;
    struct sigaction action;
    Tbl *signal_tbl ;
    char *s, *asignal_name ;
    Signal_info *asignal ;

    Faults = signals ;
    signal_tbl = split(s=strdup(signals), ':') ;
    nsignals = maxtbl(signal_tbl) ;

    action.sa_handler = _elog_fault ;
    sigemptyset(&action.sa_mask) ;
    action.sa_flags = SA_SIGINFO ;

    for (i = 0; i < nsignals ; ++i) {
	asignal_name = (char *) gettbl(signal_tbl,i) ; 
	asignal = signal_byname(asignal_name) ; 
	if ( asignal != 0 ) {
	    if (sigaction(asignal->sig, &action, (struct sigaction *)0)) 
		elog_fail ( "Couldn't intercept signal %s\n", asignal_name) ;
	} else {
	    elog_fail ("Unrecognized signal name '%s'\n", asignal_name ) ;
	}
    }
    freetbl(signal_tbl, 0) ; 
    free(s) ;
}

void
elog_msg_print ( file, elog_msg )  
FILE *file ;
Elog_msg *elog_msg ; 
{
    fputs(elog_msg->tag, file) ;
    fputs(": ", file ) ; 
    fputs(elog_msg->msg, file) ; 
    if ( elog_msg->sys ) {
	fputs("\t", file) ; 
	fputs(elog_msg->sys, file) ;
	fputs("\n", file) ; 
    }
    if ( elog_msg->n > 1 ) {
	fprintf ( file, "\t** repeated %d times\n", elog_msg->n ) ; 
    }
}

void
elog_print (FILE *file, int first) 
{
    int i, n ; 
    Elog_msg *elog_msg ; 

    if ( file == 0 ) 
	return ;

    if ( file == stderr ) 
	fflush(stdout) ;

    if ( Elog_init ) {
	mutex_lock ( &Lock ) ;
	n = maxtbl(Elog_tbl) ; 
	for (i=first ; i<n ; i++ ) {
	    elog_msg = (Elog_msg *) gettbl(Elog_tbl,i) ; 
	    elog_msg_print ( file, elog_msg ) ; 
	}
	mutex_unlock ( &Lock ) ;
    }
    fflush(file) ;
}

void 
elog_free_msg (vmsg)
void *vmsg ;
{
    Elog_msg *msg ; 
    msg = vmsg ;
    if ( msg->tag != 0 ) 
	free(msg->tag) ; 
    if ( msg->msg != 0 ) 
	free(msg->msg) ; 
}

void
elog_clear ()
{
    if ( Elog_init ) {
	mutex_lock ( &Lock ) ;
	clrtbl(Elog_tbl, elog_free_msg ) ; 
	mutex_unlock ( &Lock ) ;
    }
}

static void
elog_fatal (char *fmt, char *s ) 
{
    fprintf(stderr, fmt, s) ;
    if (errno )
	perror("\t") ; 
    elog_print ( stderr, 0 ) ; 
    elog_clear() ;
    exit (1) ; 
}

static char *Month[] = {
    "Jan", "Feb", "Mar", 
    "Apr", "May", "Jun", 
    "Jul", "Aug", "Sep", 
    "Oct", "Nov", "Dec" 
    } ;

static char *Weekday[] = {
    "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" 
    } ;

static void
elog_expand (char *fmt, char *result )
{
    char *dst ; 
    int c ; 

    dst = result ; 

    while ( (c = *fmt++) != 0 ) {
	if ( c == '%' ) {
	    c = *fmt++ ; 
	    switch (c) {
		case '%' :
		    *dst++ = c ;
		    break ;

		case 'a' :
		    if ( Argv != 0 ) {
			int i ; 
			for ( i=1 ; i<Argc ; i++ ) {
			    strcpy(dst, Argv[i]) ; 
			    dst += strlen(dst) ; 
			    *dst++ = ' ' ;
			}
		    }
		    break ;

		case 'h' : {
		    struct utsname utsname ;
		    uname (&utsname) ;
		    strncpy(dst, utsname.nodename, SYS_NMLN) ;
		    dst += strlen(dst) ; 
		    }
		    break ; 

		case 'p' : {
		    int pid ;
		    pid = getpid(); 
		    sprintf(dst, "%d", pid ) ; 
		    dst += strlen(dst) ; 
		    }
		    break; 

		case 'P' :
		    strcpy(dst, Program_Name ) ; 
		    dst += strlen(dst) ;
		    break ;

		case 'r' : {
		    char *prog, *exec ;
		    if ( Argv != 0 ) 
			prog = Argv[0] ; 
		    else if ( strcmp(Program_Name, "***" ) != 0)
			prog = Program_Name ; 
		    else
			prog = 0 ;
		    
		    if ( prog != 0 ) {
			if ( *prog != '/' && *prog != '.' ) 
			    exec = datafile ( "PATH", prog ) ; 
			else 
			    exec = strdup(prog) ;
			if ( exec != 0 ) {
			    strcpy(dst, exec) ; 
			    free(exec) ; 
			} else {
			    strcpy ( dst, "???" ) ; 
			}
		    } else {
			strcpy ( dst, "* no argv *" ) ; 
		    }
		    dst += strlen(dst) ; 
		    }
		    break ;

		case 't' : {
		    time_t systime ; 
		    struct tm *stm ;
		    systime = time(0) ; 
		    stm = localtime(&systime) ;
		    sprintf ( dst, "%3s %3s %2d %2d:%02d:%02d %4d", 
			Weekday[stm->tm_wday], 
			Month[stm->tm_mon],
			stm->tm_mday,
			stm->tm_hour,
			stm->tm_min,
			stm->tm_sec, 
			stm->tm_year + 1900 ) ; 
		    dst += strlen(dst) ; 
		    }
		    break ;

		case 'u' : {
		    time_t systime ; 
		    struct tm *stm ;
		    systime = time(0) ; 
		    stm = gmtime(&systime) ;
		    sprintf ( dst, "%04d-%03d %2d:%02d:%02d",
			stm->tm_year+1900, 
			stm->tm_yday+1,
			stm->tm_hour, 
			stm->tm_min, 
			stm->tm_sec ) ;
		    dst += strlen(dst) ; 
		    }
		    break ;

		case 'T' : {
		    int thread ; 
		    thread = thr_self() ; 
		    sprintf(dst, "%d", thread ) ; 
		    dst += strlen(dst) ; 
		    }
		    break; 

		default:
		    *dst++ = c ;
		    break ;
	    }
	} else {
	    *dst++ = c ; 
	}

	if ( dst-result > STRSZ-100) {
	    if ( dst-result < STRSZ-5 ) {
		strcat ( dst, " *..." ) ; 
		dst += strlen(dst) ; 
	    }
	    break ;
	}
    }
    *dst = 0 ;
}

#define SCHAR '@'
#define VALUE 10
#define SEVERITY 11

static void
elog_fill ( string, array, array_default, always ) 
char *string ;
char *array[], *array_default[] ;
int always ;
{
    int severity ; 

    if ( string == 0 ) {
	if ( always ) {
	    for (severity=0 ; severity<ELOG_NSEVERITY ; severity++ ) 
		array[severity] = array_default[severity] ; 
	} else {
	    for (severity=0 ; severity<ELOG_NSEVERITY ; severity++ ) 
		array[severity] = 0 ; 
	}
    } else {
	char *cp, value[STRSZ], *v ; 
	int mode, nset ; 
	
	mode = VALUE ; 
	cp = string ; 
	v = value ;
	*v = 0 ; 
	nset = 0 ;

	while ( *cp != 0 ) {
	    switch (mode) {
		case VALUE: /* accumulating the value */
		    nset = 0 ; 
		    switch(*cp) {
			case SCHAR:
			    *v = 0 ; 
			    v = strdup(value) ; 
			    mode = SEVERITY ;
			    break ;

			case '\\':
			    if ( *(cp+1) != 0 ) {
				*v++ = *(cp+1) ; 
				cp++ ; 
			    } else 
				*v++ = '\\' ; 
			    break ;

			default:
			    *v++ = *cp ; 
		    }
		    break ;

		case SEVERITY:	/* selecting severity levels */
		    switch (tolower(*cp)) {
			case 'l':
			    severity = 0 ; 
			    break ;

			case 'n':
			    severity = 1 ; 
			    break ;

			case 'c':
			    severity = 2 ; 
			    break ;

			case 'd':
			    severity = 3 ; 
			    break ;

			case 'f':
			    severity = 4 ; 
			    break ;

			case SCHAR:
			case ' ':
			    mode = VALUE ; 
			    v = value ;
			    *v = 0 ; 
			    break ;

			default:
			    elog_fail ( "Unrecognized severity '%s'\n", cp) ;
			    break ;
		    }
		    if ( mode == SEVERITY ) {
			nset ++ ; 
			if ( *v == 0 ) 
			    array[severity] = array_default[severity] ;
			else 
			    array[severity] = v ; 
		    } else if ( nset == 0 ) {
			nset++ ;
			for (severity=0 ; severity<ELOG_NSEVERITY ; severity++ ) {
			    if ( *v == 0 ) 
				array[severity] = array_default[severity] ;
			    else 
				array[severity] = v ; 
			}
		    }
		    break ;

	    }
	    cp++ ; 
	}
	if ( nset == 0 ) {
	    *v = 0 ; 
	    v = strdup(value) ; 
	    for (severity=0 ; severity<ELOG_NSEVERITY ; severity++ ) {
		if ( *value == 0 ) 
		    array[severity] = array_default[severity] ;
		else 
		    array[severity] = v ; 
	    }
	}
    }
}


int
elog_init ( argc, argv ) 
int argc ; 
char **argv ; 
{
    char *env ;

    if ( mutex_init ( &Lock, USYNC_THREAD, 0) )
	elog_fatal ( "failed to initialize elog lock mutex\n", "" ) ;

    mutex_lock ( &Lock ) ;

    Argc = argc ; 
    Argv = argv ; 
    if ( argv != 0 && argv[0] != 0 ) 
	Program_Name = argv[0] ; 

    if ( (env = getenv ( "ELOG_MAXMSG" )) != 0 ) 
	Max_msg = atoi(env) ; 
    Elog_tbl = inittbl(0, Max_msg, 1, 0, sizeof(Elog_msg) ) ; 

    if ( (env = getenv ( "ELOG_SIGNALS" )) != 0 ) 
	elog_setup_fault_handler(env) ;
    else
	elog_setup_fault_handler(Faults_default) ;

    elog_fill ( getenv("ELOG_DELIVER"), Deliver, Deliver, 1 ) ; 
    elog_fill ( getenv("ELOG_TAG"), Tag, Tag, 1 ) ; 
    elog_fill ( getenv("ELOG_DEBUG"), Debug, Debug_default, 0 ) ; 
    elog_fill ( getenv("ELOG_TKSEND"), Rtmsg, Rtmsg_default, 0 ) ; 

    if ( (env = getenv("ELOG_WAIT")) != 0 ) {
	Elog_wait = atoi(env) ; 
    }

    Elog_init = 1 ; 

    mutex_unlock ( &Lock ) ;

    return 0 ; 
}

static int
elog_deliver ( char *delivery, int first )
{
    char adest[STRSZ], *cp, *ep ; 
    int fd, printed = 0 ;
    FILE *file ;

    if ( delivery == 0 ) 
	return printed ;

    cp = delivery ;

    while ( *cp != 0 ) {
	while ( *cp != 0 && *cp == ' ' ) 
	    cp++ ; 
	ep = cp ; 
	while ( *ep != ' ' && *ep != 0) 
	    ep++ ; 

	strncpy(adest, cp, ep-cp ) ; 
	adest[ep-cp] = 0 ; 

	switch (*cp) {
	    case '.' :
	    case '/' :
		if ( (fd = open(adest, 
			O_WRONLY | O_CREAT | O_SYNC | O_APPEND | O_NOCTTY,
			0664 )) < 0 ) {
		    elog_fail ("Can't open error file '%s'\n", 
			adest );
		} else {
		    file = fdopen(fd, "a+") ; 
		    if ( file == 0 ) {
			elog_fail ( "Can't reopen file '%s' as stream", adest );
			close(fd) ;
		    } else {
			elog_print ( file, first ) ; 
			if ( fclose (file) ) {
			    elog_fail ("Can't close error file '%s'\n", adest );
			}
		    }
		}
		printed = 1 ;
		break ;

	    case 'l':
		if ( strcmp(adest, "log") != 0 ) 
		    elog_fail ("unknown delivery '%s'\n", adest ) ; 
		break; 

	    case 's':
		if ( strcmp(adest, "stderr") == 0 ) 
		    elog_print ( stderr, first) ; 
		else if ( strcmp(adest, "stdout" ) == 0 ) 
		    elog_print ( stdout, first) ; 
		else
		    elog_fail ("unknown delivery '%s'\n", adest ) ; 
		printed = 1 ;
		break; 

	    default:
		elog_fail ("unknown delivery '%s'\n", adest ) ; 
		printed = 1 ;
		break ;

	}
	while ( *cp != 0 && *cp != ' ' ) 
	    cp++ ; 
    }

    if ( printed ) {
	elog_clear () ;
    }

    return printed ;
}

static void
elog_rtmsend(format)
char *format ; 
{
    char result[STRSZ] ;
    elog_expand(format, result ) ; 
    fprintf ( stderr, "Sending message: '%s'\n", result ) ; 
}

static void
elog_debug(format)
char *format ; 
{
    char result[STRSZ] ;
    pid_t pid ;
    int status ;

    if ( ! Debugger_running ) {
	elog_expand(format, result) ; 
	fprintf ( stderr, "Running debugger: '%s'\n", result ) ; 

	if ( system(result) )
	    elog_fatal ("Can't run debugger '%s'\n", result ) ; 
	Debugger_running = 1 ;
	sleep(Elog_wait) ; 
    } else {
	/* sleep(1) ; can't get stopped again */
	/* pause() ; can't continue */
	pid = getpid(); 
	kill(pid, SIGSTOP);
	sleep(Elog_wait) ;
    }

}

static void
elog ( int severity, int flag, char *fmt, va_list args ) 
{
    char msg[10*STRSZ], tag[STRSZ] ; 
    Elog_msg new_elog_msg, *last_elog_msg = 0 ;
    int nmsg ;

    if ( ! Elog_init ) 
	elog_init( 0, (char **) 0 ) ; 


    new_elog_msg.severity = severity ; 
    new_elog_msg.msg = 0 ; 
    new_elog_msg.sys = 0 ;

    if (fmt != 0 && *fmt != 0)
	vsprintf(msg, fmt, args);
    else
	strcpy(msg, "\n") ; 
    va_end(args);

    mutex_lock ( &Lock ) ;
    nmsg = maxtbl(Elog_tbl) ; 
    if ( nmsg > 0 ) 
	last_elog_msg = gettbl(Elog_tbl, nmsg-1) ; 
    mutex_unlock ( &Lock ) ;

    if ( last_elog_msg != 0 && strcmp(msg, last_elog_msg->msg) == 0 ) {
	last_elog_msg->n ++ ; 
    } else {
	elog_expand(Tag[severity], tag) ;

	new_elog_msg.msg = strdup(msg) ;
	new_elog_msg.tag = strdup(tag) ;
	new_elog_msg.n = 1 ; 
	if (flag && errno != 0) {
	    new_elog_msg.sys = strerror(errno) ; 
	    if (new_elog_msg.sys == 0) {
		new_elog_msg.sys = "Bad system error code" ; 
	    }
	}
	mutex_lock ( &Lock ) ;
	pushtbl(Elog_tbl, &new_elog_msg ) ; 
	mutex_unlock ( &Lock ) ;
    }
    /* always reset errno to make things more reliable. */
    errno = 0 ;

    elog_deliver ( Deliver[severity], 0 ) ; 

    if ( Rtmsg[severity] )
	elog_rtmsend(Rtmsg[severity]) ;

    if ( Debug[severity] )
	elog_debug(Debug[severity]) ;

    if ( severity == ELOG_DIE || severity == ELOG_FAULT) {
	exit(1) ; 
    }

    mutex_lock ( &Lock ) ;
    nmsg = maxtbl(Elog_tbl) ; 
    mutex_unlock ( &Lock ) ;

    if ( Max_msg > 0 && nmsg >= Max_msg ) 
	die ( 0, "quitting because log has %d messages\n", nmsg ) ; 
}

void 
elog_log (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_LOG, flag, format, args ) ; 
}

void 
elog_notify (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_NOTIFY, flag, format, args ) ; 
}


void 
elog_complain (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_COMPLAIN, flag, format, args ) ; 
}


void 
elog_die (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_DIE, flag, format, args ) ; 
    exit (1) ;
}


void 
elog_fault (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_FAULT, flag, format, args ) ; 
    exit(1) ;
}

void 
elog_clear_register ( int flag ) 
{
    if ( flag ) 
	elog_print ( stderr, 0 ) ; 
    elog_clear () ; 
}

int 
elog_mark ( void ) 
{
    int mark ;
    if ( ! Elog_init ) 
	elog_init( 0, (char **) 0 ) ; 
    mutex_lock ( &Lock) ; 
    mark = maxtbl(Elog_tbl) ; 
    mutex_unlock ( &Lock) ; 
    return mark ;
}

void 
elog_flush ( int deliver, int n ) 
{
    if ( deliver ) 
	elog_deliver ( Deliver[ELOG_COMPLAIN], n ) ; 
    mutex_lock ( &Lock) ; 
    trunctbl(Elog_tbl, n, elog_free_msg ) ; 
    mutex_unlock ( &Lock) ; 
}

int 
elog_query(code, severity, value)
enum Elog_code code ;
int severity ;
void **value ;
{
    int retcode = 0 ; 

    if ( ! Elog_init ) 
	elog_init( 0, (char **) 0 ) ; 

    switch ( code ) {
	case ELOG_TBL:
	    mutex_lock ( &Lock) ; 
	    *value = (void *) Elog_tbl ;
	    mutex_unlock ( &Lock) ; 
	    break; 

	case ELOG_COUNT:
	    mutex_lock ( &Lock) ; 
	    *value = (void *) maxtbl(Elog_tbl) ; 
	    mutex_unlock ( &Lock) ; 
	    break ;

	case ELOG_MAXMSG:
	    *value = (void *) Max_msg ; 
	    break ;

	case ELOG_ARGV:
	    *value = (void *) Argv ; 
	    break ;

	case ELOG_ARGC:
	    *value = (void *) Argc ; 
	    break ;

	case ELOG_TAG:
	    *value = (void *) Tag[severity] ; 
	    break ;

	case ELOG_DELIVER:
	    *value = (void *) Deliver[severity] ;
	    break ;

	case ELOG_VERSION:
	    *value = (void *) Version ; 
	    break; 

	case ELOG_DEBUG:
	    *value = (void *) Debug[severity] ; 
	    break ;

	case ELOG_SIGNALS:
	    *value =  (void *) Faults ;
	    break ;

	case ELOG_RTMSEND:
	    *value = (void *) Rtmsg[severity] ;
	    break; 

	default:
	    retcode = -1 ; 
	    break; 
    }

    return retcode ;
}


#define ok_severity(N) (N>=0 && N<ELOG_NSEVERITY)

int 
elog_set(code, severity, value)
enum Elog_code code ;
int severity ;
void *value ;
{
    int retcode = 0 ; 

    if ( ! Elog_init ) 
	elog_init( 0, (char **) 0 ) ; 

    switch ( code ) {
	case ELOG_TBL:
	    mutex_lock ( &Lock) ; 
	    Elog_tbl = (Tbl *) value ;
	    mutex_unlock ( &Lock) ; 
	    break; 

	case ELOG_COUNT:
	    mutex_lock ( &Lock) ; 
	    trunctbl(Elog_tbl, (int) value, elog_free_msg ) ;
	    mutex_unlock ( &Lock) ; 
	    break ;

	case ELOG_MAXMSG:
	    Max_msg = (int) value ; 
	    break ;

	case ELOG_ARGV:
	    Argv = (char **) value ;
	    break ;

	case ELOG_ARGC:
	    Argc = (int) value ; 
	    break ;

	case ELOG_TAG:
	    if (ok_severity(severity))
		Tag[severity] = (char *) value ;
	    else
		retcode = -1 ;
	    break ;

	case ELOG_DELIVER:
	    if (ok_severity(severity))
		Deliver[severity] = (char *) value ;
	    else
		retcode = -1 ;
	    break ;

	case ELOG_DEBUG:
	    if (ok_severity(severity))
		Debug[severity] = (char *) value ;
	    else
		retcode = -1 ;
	    break ;

	case ELOG_SIGNALS:
	    elog_setup_fault_handler((char *) value) ;
	    break ;

	case ELOG_RTMSEND:
	    if (ok_severity(severity))
		Debug[severity] = (char *) value ;
	    else
		retcode = -1 ;
	    break ;

	default:
	    retcode = -1 ; 
	    break; 
    }

    return retcode ;
}


/* The following are compatibility functions which will
 * disappear at some point in the future.  They're here now
 * only to ensure that applications which have dynamically linked 
 * with old versions of the stock library will continue to run.
 */
#undef die
#undef complain
#undef register_error
#undef clear_register
void 
register_error (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_LOG, flag, format, args ) ; 
}

void 
complain (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_COMPLAIN, flag, format, args ) ; 
}

void 
die (int flag, char *format, ...)
{
    va_list args ;
    va_start(args, format) ; 
    elog ( ELOG_DIE, flag, format, args ) ; 
    exit (1) ;
}


void 
clear_register ( int deliver ) 
{
    if ( deliver ) 
	elog_deliver ( Deliver[ELOG_COMPLAIN], 0 ) ; 
    elog_clear () ; 
}

static void
elog_msg_make ( string, elog_msg )  
char **string ;
Elog_msg *elog_msg ; 
{
    int size = 0 ; 
    char *s ; 

    size = strlen(elog_msg->tag) 
	    + 2 
	    + strlen(elog_msg->msg)
	    + ( elog_msg->sys ? strlen(elog_msg->sys)+2 : 0 ) 
	    + ( (elog_msg->n > 1) ? 22 : 0 ) 
	    + 1 ; 
    allot ( char *, s, size ) ; 
    *string = s ;

    strcpy(s, elog_msg->tag) ;
    strcat(s, ": ") ;
    strcat(s, elog_msg->msg) ;
    if ( elog_msg->sys ) {
	strcat(s, "\t") ;
	strcat(s, elog_msg->sys) ;
	strcat(s, "\n") ;
    }
    if ( elog_msg->n > 1 ) {
	s += strlen(s) ; 
	sprintf ( s, "\t** repeated %d times\n", elog_msg->n ) ; 
    }
}

void
get_register(msgs, msgcount, maxmsgs, last, wrap )
char         ***msgs;
int	       **msgcount ;
int            *maxmsgs;
int            *last;
int            *wrap;
{
    static Tbl *messages=0 ;
    static Tbl *count ;
    Elog_msg *elog_msg ;
    char *s ;
    static int n ;
    int i; 


    if ( ! Elog_init ) 
	elog_init( 0, (char **) 0 ) ; 

    mutex_lock ( &Lock ) ; 
    n = maxtbl(Elog_tbl) ; 

    if ( messages == 0 ) {
	messages = newtbl(n) ;
	count = newtbl(n) ;
    } else {
	clrtbl(messages,free) ; 
	clrtbl(count,0) ; 
    }
    for(i=0 ; i<n ; i++ ) {
	elog_msg = (Elog_msg *) gettbl(Elog_tbl, i) ; 
	elog_msg_make ( &s, elog_msg ) ; 
	settbl(messages, i, s) ; 
	settbl(count, i, (int *) elog_msg->n ) ;
    }
    mutex_unlock ( &Lock ) ; 
    *msgs = (char **) addrtbl(messages,0);
    *msgcount = (int *) addrtbl(count,0);
    *maxmsgs = Max_msg;
    *last = n;
    *wrap = 0 ;
}

/* $Id: elog.c,v 1.11 1998/05/04 22:28:28 danq Exp $ */
